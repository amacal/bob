using System.Collections.Generic;

using Bob;

public class Build : IBob
{
    private ITask Clean()
    {
        return FileSystem.Delete(parameters =>
        {
            parameters.Directories = FileSystem.Directories.Match("build");
        });
    }

    private ITask Restore()
    {
        return NuGet.Restore(parameters =>
        {
            parameters.Path = NuGet.Path.Online(settings =>
            {
                settings.Cache = NuGet.Cache.AppData();
            });
        });
    }

    private IEnumerable<ITask> Compile()
    {
        yield return MsBuild.Compile(parameters =>
        {
            parameters.Output = FileSystem.Directories.Relative("build\\output");
        });
    }

    private IEnumerable<ITask> Test()
    {
        yield return NuGet.Install(parameters =>
        {
            parameters.Package = NuGet.Repository.Get("NUnit.Runners");
            parameters.Path = NuGet.Path.Online(settings =>
            {
                settings.Cache = NuGet.Cache.AppData();
            });
        });

        yield return NUnit.Execute(parameters =>
        {
            parameters.Assemblies = FileSystem.Files.Match("build\\output\\*.Tests*dll");
            parameters.XmlResult = FileSystem.Files.Relative("build\\nunit.xml");
        });
    }

    private IEnumerable<ITask> Merge()
    {
        yield return FileSystem.NewDirectory(parameters =>
        {
            parameters.Path = FileSystem.Directories.Relative("build\\merge");
        });

        yield return NuGet.Install(parameters =>
        {
            parameters.Package = NuGet.Repository.Get("ilrepack");
            parameters.Path = NuGet.Path.Online(settings =>
            {
                settings.Cache = NuGet.Cache.AppData();
            });
        });

        yield return ILRepack.Merge(parameters =>
        {
            parameters.Output = FileSystem.Files.Relative("build\\merge\\bob.exe");
            parameters.Primary = FileSystem.Files.Match("build\\output\\bob.exe");
            parameters.Assemblies = FileSystem.Files.Match("build\\output\\Microsoft.CodeAnalysis*.dll", "build\\output\\System.*.dll");
        });
    }

    private IEnumerable<ITask> Pack()
    {
        yield return FileSystem.NewDirectory(parameters =>
        {
            parameters.Path = FileSystem.Directories.Relative("build\\package");
        });

        yield return NuGet.Pack(parameters =>
        {
            parameters.Output = FileSystem.Directories.Match("build\\package");
            parameters.Path = NuGet.Path.Online(settings =>
            {
                settings.Cache = NuGet.Cache.AppData();
            });
            parameters.Specification = NuGet.Specification.Inline(package =>
            {
                package.Id = "bob-make";
                package.Version = "0.1.0-dev3";
                package.Authors = "Adrian Macal";
                package.Description = "C# based build automation system";
                package.Files["tools"] = FileSystem.Files.Match("build\\merge\\*");
            });
        });
    }

    private IEnumerable<ITask> Default()
    {
        yield break;
    }

    public void Execute(IPipeline pipeline)
    {
        pipeline.Default(Default);
        pipeline.Define(Clean, Restore, Compile, Test, Default, Merge, Pack);
    }
}