// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bob.Tests.SpecFlow
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NUnit")]
    public partial class NUnitFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "NUnit.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NUnit", "\r\nIn order to support the community testing with NUnit\r\nI want to be able to use " +
                    "it in the Bob\'s tasks", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Executing all tests")]
        public virtual void ExecutingAllTests()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing all tests", ((string[])(null)));
#line 6
 this.ScenarioSetup(scenarioInfo);
#line 8
    testRunner.Given("there is npgsql repository cloned into \"D:/Projects/npgsql\" directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
        testRunner.And("\"D:/Projects/npgsql\" is the working directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
        testRunner.And("there is npgsql repository already restored in \"D:/Projects/npgsql/packages\" dire" +
                    "ctory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
        testRunner.And("there is npgsql repository already compiled in \"D:/Projects/npgsql/build/output\" " +
                    "directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code"});
            table1.AddRow(new string[] {
                        "NUnit.Execute(parameters =>"});
            table1.AddRow(new string[] {
                        "{"});
            table1.AddRow(new string[] {
                        "parameters.Assemblies = FileSystem.Files.Match(\"build/output/*.Tests.dll\");"});
            table1.AddRow(new string[] {
                        "})"});
#line 12
  testRunner.When("I execute the following task", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table2.AddRow(new string[] {
                        "Process",
                        "D:\\Projects\npgsql\\packages\\NUnit.Runners.2.6.4\\tools\nunit-console.exe"});
            table2.AddRow(new string[] {
                        "WorkingDirectory",
                        "D:\\Projects\npgsql"});
            table2.AddRow(new string[] {
                        "Arguments",
                        "D:\\Projects\npgsql\\build\\output\\Npgsql.Tests.dll"});
#line 20
  testRunner.Then("the following process is being executed", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
