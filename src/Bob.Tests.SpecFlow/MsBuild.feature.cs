// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bob.Tests.SpecFlow
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MsBuild")]
    public partial class MsBuildFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MsBuild.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MsBuild", "\r\nIn order to support the community using MsBuild\r\nI want to be able to use it in" +
                    " the Bob\'s tasks", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compiling NetJSON using MsBuild 12.0")]
        public virtual void CompilingNetJSONUsingMsBuild12_0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compiling NetJSON using MsBuild 12.0", ((string[])(null)));
#line 6
 this.ScenarioSetup(scenarioInfo);
#line 8
  testRunner.Given("a MsBuild version 12.0 is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
  testRunner.And("there is NetJSON repository cloned into \"D:/Projects/NetJSON\" directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
        testRunner.And("\"D:/Projects/NetJSON\" is the working directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code"});
            table1.AddRow(new string[] {
                        "MsBuild.Compile(parameters => {})"});
#line 11
  testRunner.When("I execute the following task", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table2.AddRow(new string[] {
                        "Process",
                        "C:\\Program Files (x86)\\MSBuild\\12.0\\bin\\amd64\\msbuild.exe"});
            table2.AddRow(new string[] {
                        "WorkingDirectory",
                        "D:\\Projects\\NetJSON"});
            table2.AddRow(new string[] {
                        "Arguments",
                        ""});
#line 16
  testRunner.Then("the following process is being executed", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compiling NetJSON using MsBuild 12.0 into specified directory")]
        public virtual void CompilingNetJSONUsingMsBuild12_0IntoSpecifiedDirectory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compiling NetJSON using MsBuild 12.0 into specified directory", ((string[])(null)));
#line 23
 this.ScenarioSetup(scenarioInfo);
#line 25
  testRunner.Given("a MsBuild version 12.0 is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
  testRunner.And("there is NetJSON repository cloned into \"D:/Projects/NetJSON\" directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
        testRunner.And("\"D:/Projects/NetJSON\" is the working directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code"});
            table3.AddRow(new string[] {
                        "MsBuild.Compile(parameters =>"});
            table3.AddRow(new string[] {
                        "{"});
            table3.AddRow(new string[] {
                        "parameters.Output = FileSystem.Directories.Relative(\"build/output\");"});
            table3.AddRow(new string[] {
                        "})"});
#line 28
  testRunner.When("I execute the following task", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table4.AddRow(new string[] {
                        "Process",
                        "C:\\Program Files (x86)\\MSBuild\\12.0\\bin\\amd64\\msbuild.exe"});
            table4.AddRow(new string[] {
                        "WorkingDirectory",
                        "D:\\Projects\\NetJSON"});
            table4.AddRow(new string[] {
                        "Arguments",
                        "/p:OutDir=D:\\Projects\\NetJSON\\build\\output"});
#line 36
  testRunner.Then("the following process is being executed", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compiling npgsql using MsBuild 12.0 specifying solution name")]
        public virtual void CompilingNpgsqlUsingMsBuild12_0SpecifyingSolutionName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compiling npgsql using MsBuild 12.0 specifying solution name", ((string[])(null)));
#line 43
    this.ScenarioSetup(scenarioInfo);
#line 45
     testRunner.Given("a MsBuild version 12.0 is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
  testRunner.And("there is npgsql repository cloned into \"D:/Projects/npgsql\" directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
        testRunner.And("\"D:/Projects/npgsql\" is the working directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code"});
            table5.AddRow(new string[] {
                        "MsBuild.Compile(parameters =>"});
            table5.AddRow(new string[] {
                        "{"});
            table5.AddRow(new string[] {
                        "parameters.Solution = FileSystem.Files.Match(\"Npgsql2013.sln\");"});
            table5.AddRow(new string[] {
                        "})"});
#line 48
  testRunner.When("I execute the following task", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table6.AddRow(new string[] {
                        "Process",
                        "C:\\Program Files (x86)\\MSBuild\\12.0\\bin\\amd64\\msbuild.exe"});
            table6.AddRow(new string[] {
                        "WorkingDirectory",
                        "D:\\Projects\npgsql"});
            table6.AddRow(new string[] {
                        "Arguments",
                        "D:\\Projects\npgsql\\Npgsql2013.sln"});
#line 56
  testRunner.Then("the following process is being executed", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
