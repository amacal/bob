// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bob.Tests.SpecFlow
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NuGet")]
    public partial class NuGetFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "NuGet.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NuGet", "\r\nIn order to support the community using NuGet\r\nI want to be able to use it in t" +
                    "he Bob\'s tasks", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Restoring npgsql packages")]
        public virtual void RestoringNpgsqlPackages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Restoring npgsql packages", ((string[])(null)));
#line 6
 this.ScenarioSetup(scenarioInfo);
#line 8
  testRunner.Given("there is npgsql repository cloned into \"D:/Projects/npgsql\" directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
        testRunner.And("\"D:/Projects/npgsql\" is the working directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code"});
            table1.AddRow(new string[] {
                        "NuGet.Restore(parameters => {})"});
#line 10
  testRunner.When("I execute the following task", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table2.AddRow(new string[] {
                        "Process",
                        "D:\\Projects\npgsql\\.nuget\nuget.exe"});
            table2.AddRow(new string[] {
                        "WorkingDirectory",
                        "D:\\Projects\npgsql"});
            table2.AddRow(new string[] {
                        "Arguments",
                        "restore"});
#line 15
  testRunner.Then("the following process is being executed", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Restoring npgsql packages with specified solution")]
        public virtual void RestoringNpgsqlPackagesWithSpecifiedSolution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Restoring npgsql packages with specified solution", ((string[])(null)));
#line 22
 this.ScenarioSetup(scenarioInfo);
#line 24
  testRunner.Given("there is npgsql repository cloned into \"D:/Projects/npgsql\" directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
        testRunner.And("\"D:/Projects/npgsql\" is the working directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code"});
            table3.AddRow(new string[] {
                        "NuGet.Restore(parameters =>"});
            table3.AddRow(new string[] {
                        "{"});
            table3.AddRow(new string[] {
                        "parameters.Solution = FileSystem.Files.Match(\"Npgsql2012.sln\");"});
            table3.AddRow(new string[] {
                        "})"});
#line 26
  testRunner.When("I execute the following task", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table4.AddRow(new string[] {
                        "Process",
                        "D:\\Projects\npgsql\\.nuget\nuget.exe"});
            table4.AddRow(new string[] {
                        "WorkingDirectory",
                        "D:\\Projects\npgsql"});
            table4.AddRow(new string[] {
                        "Arguments",
                        "restore D:\\Projects\npgsql\\Npgsql2012.sln"});
#line 34
  testRunner.Then("the following process is being executed", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Restoring npgsql packages with downloaded tool")]
        public virtual void RestoringNpgsqlPackagesWithDownloadedTool()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Restoring npgsql packages with downloaded tool", ((string[])(null)));
#line 41
    this.ScenarioSetup(scenarioInfo);
#line 43
     testRunner.Given("there is npgsql repository cloned into \"D:/Projects/npgsql\" directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
        testRunner.And("\"D:/Projects/npgsql\" is the working directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
        testRunner.And("\"C:/Windows/Temp\" is the temp directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code"});
            table5.AddRow(new string[] {
                        "NuGet.Restore(parameters =>"});
            table5.AddRow(new string[] {
                        "{"});
            table5.AddRow(new string[] {
                        "parameters.Path = NuGet.Path.Online();"});
            table5.AddRow(new string[] {
                        "})"});
#line 46
  testRunner.When("I execute the following task", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table6.AddRow(new string[] {
                        "Process",
                        "C:\\Windows\\Temp\nuget.exe"});
            table6.AddRow(new string[] {
                        "WorkingDirectory",
                        "D:\\Projects\npgsql"});
            table6.AddRow(new string[] {
                        "Arguments",
                        "restore"});
#line 54
  testRunner.Then("the following process is being executed", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Installing NUnit.Runners package for npgsql")]
        public virtual void InstallingNUnit_RunnersPackageForNpgsql()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Installing NUnit.Runners package for npgsql", ((string[])(null)));
#line 61
    this.ScenarioSetup(scenarioInfo);
#line 63
     testRunner.Given("there is npgsql repository cloned into \"D:/Projects/npgsql\" directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 64
        testRunner.And("\"D:/Projects/npgsql\" is the working directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code"});
            table7.AddRow(new string[] {
                        "NuGet.Install(parameters =>"});
            table7.AddRow(new string[] {
                        "{"});
            table7.AddRow(new string[] {
                        "parameters.Package = NuGet.Repository.Get(\"NUnit.Runners\");"});
            table7.AddRow(new string[] {
                        "})"});
#line 65
  testRunner.When("I execute the following task", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table8.AddRow(new string[] {
                        "Process",
                        "D:\\Projects\npgsql\\.nuget\nuget.exe"});
            table8.AddRow(new string[] {
                        "WorkingDirectory",
                        "D:\\Projects\npgsql"});
            table8.AddRow(new string[] {
                        "Arguments",
                        "install NUnit.Runners -o D:\\Projects\npgsql\\packages"});
#line 73
  testRunner.Then("the following process is being executed", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating npgsql package from scratch")]
        public virtual void CreatingNpgsqlPackageFromScratch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating npgsql package from scratch", ((string[])(null)));
#line 80
    this.ScenarioSetup(scenarioInfo);
#line 82
     testRunner.Given("there is npgsql repository cloned into \"D:/Projects/npgsql\" directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
        testRunner.And("\"D:/Projects/npgsql\" is the working directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
  testRunner.And("\"C:/Windows/Temp\" is the temp directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code"});
            table9.AddRow(new string[] {
                        "NuGet.Pack(parameters =>"});
            table9.AddRow(new string[] {
                        "{"});
            table9.AddRow(new string[] {
                        "parameters.Path = NuGet.Path.Online();"});
            table9.AddRow(new string[] {
                        "parameters.Specification = NuGet.Specification.Inline(package =>"});
            table9.AddRow(new string[] {
                        "{"});
            table9.AddRow(new string[] {
                        "package.Id = \"npgsql\";"});
            table9.AddRow(new string[] {
                        "package.Version = \"2.2.6\";"});
            table9.AddRow(new string[] {
                        "package.Authors = \"John Smith\";"});
            table9.AddRow(new string[] {
                        "package.Description = \"\";"});
            table9.AddRow(new string[] {
                        "package.Files[\"src\"] = FileSystem.Files.Match(\"*.sln\");"});
            table9.AddRow(new string[] {
                        "});"});
            table9.AddRow(new string[] {
                        "})"});
#line 85
        testRunner.When("I execute the following task", ((string)(null)), table9, "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table10.AddRow(new string[] {
                        "Process",
                        "C:\\Windows\\Temp\nuget.exe"});
            table10.AddRow(new string[] {
                        "WorkingDirectory",
                        "D:\\Projects\npgsql"});
            table10.AddRow(new string[] {
                        "Arguments",
                        "pack C:\\Windows\\Temp\\file.nuspec"});
#line 101
  testRunner.Then("the following process is being executed", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
