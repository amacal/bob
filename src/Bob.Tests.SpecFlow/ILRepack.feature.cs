// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bob.Tests.SpecFlow
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ILRepack")]
    public partial class ILRepackFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ILRepack.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ILRepack", "\r\nIn order to support the community using ILRepack\r\nI want to be able to use it i" +
                    "n the Bob\'s tasks", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Merging all artifacts")]
        public virtual void MergingAllArtifacts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merging all artifacts", ((string[])(null)));
#line 6
 this.ScenarioSetup(scenarioInfo);
#line 8
    testRunner.Given("there is bob repository cloned into \"D:/Projects/bob\" directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
        testRunner.And("\"D:/Projects/bob\" is the working directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
        testRunner.And("there is bob repository already restored in \"D:/Projects/bob/packages\" directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
        testRunner.And("there is bob repository already compiled in \"D:/Projects/bob/build/output\" direct" +
                    "ory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code"});
            table1.AddRow(new string[] {
                        "ILRepack.Merge(parameters =>"});
            table1.AddRow(new string[] {
                        "{"});
            table1.AddRow(new string[] {
                        "parameters.Output = FileSystem.Directories.Relative(\"build/merge/bob.exe\");"});
            table1.AddRow(new string[] {
                        "parameters.Primary = FileSystem.Files.Match(\"build/output/bob.exe\");"});
            table1.AddRow(new string[] {
                        "parameters.Assemblies = FileSystem.Files.Match(\"build/output/*.dll\");"});
            table1.AddRow(new string[] {
                        "})"});
#line 12
  testRunner.When("I execute the following task", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table2.AddRow(new string[] {
                        "Process",
                        "D:\\Projects\\bob\\packages\\ilrepack.1.26.0\\tools\\ilrepack.exe"});
            table2.AddRow(new string[] {
                        "WorkingDirectory",
                        "D:\\Projects\\bob"});
            table2.AddRow(new string[] {
                        "Arguments",
                        "/out:D:\\Projects\\bob\\build\\merge\\bob.exe D:\\Projects\\bob\\build\\output\\Bob.exe D:\\" +
                            "Projects\\bob\\build\\output\\Microsoft.CodeAnalysis.dll D:\\Projects\\bob\\build\\outpu" +
                            "t\\Microsoft.CodeAnalysis.CSharp.dll"});
#line 22
  testRunner.Then("the following process is being executed", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
